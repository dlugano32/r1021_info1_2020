En el ejercicio anterior de servidor concurrente, luego de que un cliente daba por finalizada la comunicación, el proceso hijo del programa servidor que se encargaba de manejar dicha comunicación quedaba en estado “zombie” (defunct), ya que este proceso terminaba y mandaba su respectiva señal SIGCHILD, pero el padre no se la atendía y no podía liberarlo para que terminase su ejecución. Esto se debe a que la función wait () es bloqueante como la función accept(), por lo que si se incluyera ambas en el proceso padre se dificultará la escritura del programa y se necesitaría una función accept () no bloqueante para que se pudieran seguir aceptando peticiones de conexión 
Para solucionar este inconveniente se utilizan los “handlers” o manejadores de señal, en los cuales se crea una función que se encargará de aceptar la señal de cierre que manda el proceso hijo al finalizar, de manera que no queden procesos zombies. Estos se ejecutan cuando los procesos hijos envían la señal SIGCHILD. La función waitpid () se incluye dentro de dicha función que se encarga de manejar los cierres de los procesos hijos y también de esta manera podemos obtener sus estados de finalización (status de salida).
